{
  "zh-cn": [
    {
      "filename": "addBlog.md",
      "__html": "<h2>添加博客</h2>\n<h3>放置位置</h3>\n<p>根据文档对应的语言版本，放入<code>blog</code>目录下的<code>zh-cn</code>或者<code>en-us</code>，可以是一层或者多层目录。</p>\n<h3>博客列表页配置</h3>\n<p>文档放入对应语言的目录中后，需要在<code>site_config/blog.js</code>中配置。其中的<code>link</code>字段用于配置访问地址，格式为<code>/blog/path-to-the-md</code>，需要注意的是这个路径不要包括语言路径（<code>zh-cn</code>或<code>en-us</code>）。</p>\n<p>例如，某个博客的存放位置为<code>root_directory/blog/en/demo/xxx.md</code>，那么<code>link</code>字段的配置值为<code>/blog/demo/xxx.md</code>。</p>\n"
    },
    {
      "filename": "addDoc.md",
      "__html": "<h2>添加文档</h2>\n<p>文档编写完成后，需要将其添加到页面当中。</p>\n<h3>放置位置</h3>\n<p>根据文档对应的语言版本，放入<code>docs</code>目录下的<code>zh-cn</code>或者<code>en-us</code>，可以是一层或者多层目录。</p>\n<h3>菜单配置</h3>\n<p>文档放入对应语言的目录中后，需要在<code>site_config/docs.js</code>中配置。其中的<code>link</code>字段用于配置访问地址，格式为<code>/docs/path-to-the-md</code>，需要注意的是这个路径不要包括语言路径（<code>zh-cn</code>或<code>en-us</code>）。</p>\n<p>例如，某个文档的存放位置为<code>root_directory/docs/en/demo/xxx.md</code>，那么<code>link</code>字段的配置值为<code>/docs/demo/xxx.md</code>。</p>\n"
    },
    {
      "filename": "commandLine.md",
      "__html": "<h2>命令行使用</h2>\n<p><code>docsite</code>集成的主要命令只有三个，主要如下：</p>\n<h3><code>docsite init</code></h3>\n<p>在项目根目录下执行该命令，会在目录下初始化一个站点开发模板并安装好相关依赖。</p>\n<h3><code>docsite start</code></h3>\n<p>执行该命令，会在本地启动一个开发服务器，端口号为<code>8080</code>。同时会在浏览器中自动打开该页面。在开发过程中，修改源代码包括markdown文档时，会自动进行编译，刷新浏览器即可看到更新后的结果。</p>\n<h3><code>docsite build</code></h3>\n<p>待本地开发完成后，运行该命令，将对源码和markdown文档进行编译和构建，生成构建后的文件。</p>\n<h3>其他</h3>\n<p>执行<code>docsite -h</code>获取更多命令的使用</p>\n"
    },
    {
      "filename": "create.md",
      "__html": "<h2>创建站点</h2>\n<blockquote>\n<p>在做好前面的准备工作后，现在可以着手定义属于你自己的站点了。</p>\n</blockquote>\n<p>在项目根目录下执行<code>docsite start</code>命令，会在浏览器中自动打开页面。</p>\n<p>初始化生成的模板工程默认集成了首页、文档页、博客列表页、博客详情页、社区页及中英文国际化功能。可以按照需求自行添加和删除页面。</p>\n<h3>添加文档</h3>\n<ol>\n<li>将对应的<code>.md</code>或者<code>.markdown</code>文件放进<code>docs</code>文件夹下的对应语言目录中，支持多级目录存放</li>\n<li>在<code>site_config</code>文件夹下的<code>docs.js</code>中配置文档的菜单项</li>\n</ol>\n<h3>添加博客</h3>\n<ol>\n<li>将对应的<code>.md</code>或者<code>.markdown</code>文件放进<code>blog</code>文件夹下的对应语言目录中，支持多级目录存放</li>\n<li>在<code>site_config</code>文件夹下的<code>blog.js</code>中配置博客的列表项</li>\n</ol>\n<blockquote>\n<p>markdown文件均支持在文档顶部自定义元数据，顶部的<code>---</code>（至少三个<code>-</code>）之间的数据会被认为是元数据，一个key占用一行。这些数据解析后会对应存放在<code>md_json</code>文件夹下的<code>blog.json</code>和<code>docs.json</code>文件中，其中<code>filename</code>和<code>__html</code>为保留字段，请勿使用。</p>\n</blockquote>\n<pre><code>---\nkey1: hello\nkey2: world\n---\n\nyour markdown content\n</code></pre>\n<h3>自定义页面</h3>\n<ol>\n<li>如果想增加页面，在<code>pages</code>目录下增加相应的页面，并在<code>src</code>目录下的<code>index.jsx</code>文件中配置对应的路由，同步在<code>site_config</code>文件夹下增加对应的页面配置</li>\n<li>如果想修改页面，在<code>pages</code>目录下针对修改对应的页面，并同步修改<code>site_config</code>文件夹下对应的页面配置</li>\n<li>如果想删除页面，在<code>pages</code>目录下增加相应的页面，并在<code>src</code>目录下的<code>index.jsx</code>文件中删除对应的路由，同步在<code>site_config</code>文件夹下删除对应的页面配置</li>\n<li>如果想修改站点的整体色调，请修改<code>src</code>目录下的<code>variables.scss</code></li>\n<li>如果想修改markdown文档的样式，请修改<code>src</code>目录下的<code>markdown.scss</code></li>\n</ol>\n<h3>页面标签及站点ico</h3>\n<p>修改根目录下的<code>index.html</code>中的<code>&lt;title&gt;页面标签标题&lt;/title&gt;</code>和<code>&lt;link rel=&quot;icon&quot; href=&quot;./img/dubbo.ico&quot;&gt;</code>的<code>href</code>属性。</p>\n"
    },
    {
      "filename": "customStyle.md",
      "__html": "<h2>自定义样式</h2>\n<p>自定义样式分为整个站点的自定义和文档展示风格的自定义。</p>\n<h3>站点自定义</h3>\n<p><code>src</code>目录下的<code>variables.scss</code>文件中，定义了一些用于控制站点整体显示风格的一些scss变量。通过修改这些变量，能够获得不同风格的站点。</p>\n<p>当然，如果这样还觉得不满足需求，可以进入到每个具体的页面的样式文件中去修改。</p>\n<h3>文档展示风格自定义</h3>\n<p><code>src</code>目录下的<code>markdown.scss</code>文件中，定义了文档展示风格的样式。分为两部分，文档的展示和代码高亮的展示。</p>\n<ul>\n<li>文档的展示</li>\n</ul>\n<p>默认采用github风格<a href=\"https://github.com/sindresorhus/github-markdown-css\">https://github.com/sindresorhus/github-markdown-css</a>，如果想要其他风格，请修改<code>markdown.scss</code>文件。</p>\n<ul>\n<li>代码高亮</li>\n</ul>\n<p>在<a href=\"https://highlightjs.org/static/demo/\">https://highlightjs.org/static/demo/</a>中去选择喜爱的高亮配色，然后根据选择后的主题名称，在<a href=\"https://github.com/isagalaev/highlight.js/tree/master/src/styles\">https://github.com/isagalaev/highlight.js/tree/master/src/styles</a>中复制对应的样式文件到<code>markdown.scss</code>中即可。</p>\n"
    },
    {
      "filename": "doc.md",
      "__html": "<h2>文档编写</h2>\n<h3>元数据</h3>\n<p>markdown文件均支持在文档顶部自定义元数据，顶部的<code>---</code>（至少三个<code>-</code>）之间的数据会被认为是元数据，一个key占用一行。这些数据解析后会对应存放在<code>md_json</code>文件夹下，blog的文档对应<code>blog.json</code>文件，docs下的文档对应<code>docs.json</code>文件，其中<code>filename</code>和<code>__html</code>为保留字段，请勿使用。</p>\n<pre><code>---\nkey1: hello\nkey2: world\n---\n</code></pre>\n<h3>路径</h3>\n<p>在编写markdown文档时，难免需要文档之间的相互引用。而相对地址的写法相比于绝对地址，对于站点内文档之间的引用显得更为便捷。</p>\n<p>当需要引用其他文档时，引用路径按照在项目目录的相对文件地址引用即可。</p>\n<p>同样的，当需要引用项目内的图片资源，引用路径同样是相对的文件地址。最终会被处理成正确的绝对地址。</p>\n"
    },
    {
      "filename": "i18n.md",
      "__html": "<h2>国际化</h2>\n<p>国际化分为两部分，分别为markdown文档的国际化和站点其余部分的国际化。</p>\n<h3>markdown文档的国际化</h3>\n<p>markdown文档主要分为说明文档和博客文档。这两种类型文档的国际化处理方式是类似的，说明文档按照中英文版本分别放入<code>docs</code>目录下的<code>zh-cn</code>和<code>en-us</code>目录中。博客文档按照中英文版本分别放入<code>blog</code>目录下的<code>zh-cn</code>和<code>en-us</code>目录中。</p>\n<h3>站点其余部分的国际化</h3>\n<p>在<code>site_config</code>目录中，根据中英文版本分别对应着<code>zh-cn</code>和<code>en-us</code>字段，所有页面相关的文案均需配置在这两个字段下。</p>\n"
    },
    {
      "filename": "installation.md",
      "__html": "<h2>安装</h2>\n<p>docsite用于根据markdown文档快速搭建静态站点。</p>\n<ol>\n<li>确保安装的<a href=\"https://nodejs.org/en/download/\">node</a>版本满足如下要求：<code>node &gt;= 8.6.0</code></li>\n<li>执行<code>npm install docsite -g</code>执行全局安装</li>\n</ol>\n<h2>验证安装</h2>\n<p>在终端中执行 <code>docsite -V</code>，能够显示当前安装的<code>docsite</code>版本，则表示安装成功。</p>\n"
    },
    {
      "filename": "preparation.md",
      "__html": "<h2>站点准备</h2>\n<p>在成功安装完<code>docsite</code>之后，进入项目根目录，执行<code>docsite init</code>，生成的目录如下结构：</p>\n<pre><code>|-- Project root\n    |-- .babelrc\n    |-- .docsite\n    |-- .eslintrc\n    |-- .gitignore\n    |-- README.md\n    |-- gulpfile.js\n    |-- index.html\n    |-- package-lock.json\n    |-- package.json\n    |-- webpack.config.js\n    |-- blog\n    |   |-- en-us\n    |   |   |-- blog1.md\n    |   |   |-- blog2.md\n    |   |   |-- blog3.md\n    |   |   |-- blog4.md\n    |   |   |-- blog5.md\n    |   |   |-- blog6.md\n    |   |   |-- blog7.md\n    |   |-- zh-cn\n    |       |-- blog1.md\n    |       |-- blog2.md\n    |       |-- blog3.md\n    |       |-- blog4.md\n    |       |-- blog5.md\n    |       |-- blog6.md\n    |       |-- blog7.md\n    |-- docs\n    |   |-- en-us\n    |   |   |-- demo1.md\n    |   |   |-- demo2.md\n    |   |   |-- dir\n    |   |   |   |-- demo3.md\n    |   |   |-- img\n    |   |       |-- brhtqqzh.jpeg\n    |   |-- zh-cn\n    |       |-- demo1.md\n    |       |-- demo2.md\n    |       |-- dir\n    |       |   |-- demo3.md\n    |       |-- img\n    |           |-- brhtqqzh.jpeg\n    |-- img\n    |   |-- alibaba.png\n    |   |-- alibaba_hover.png\n    |   |-- architecture.png\n    |   |-- brhtqqzh.jpeg\n    |   |-- documents.png\n    |   |-- dubbo.ico\n    |   |-- dubbo_colorful.png\n    |   |-- dubbo_gray.png\n    |   |-- dubbo_white.png\n    |   |-- feature_hogh.png\n    |   |-- feature_loadbalances.png\n    |   |-- feature_maintenance.png\n    |   |-- feature_runtime.png\n    |   |-- feature_service.png\n    |   |-- feature_transpart.png\n    |   |-- issue.png\n    |   |-- mailinglist.png\n    |   |-- mailinglist_hover.png\n    |   |-- pullrequest.png\n    |   |-- quick_start.png\n    |   |-- segmentfault.png\n    |   |-- segmentfault_hover.png\n    |   |-- users_alibaba.png\n    |   |-- weibo.png\n    |   |-- weibo_hover.png\n    |   |-- system\n    |       |-- arrow_down.png\n    |       |-- arrow_right.png\n    |       |-- blog.png\n    |       |-- community.png\n    |       |-- docs.png\n    |       |-- docs_hover.png\n    |       |-- docs_normal.png\n    |       |-- menu_gray.png\n    |       |-- menu_white.png\n    |       |-- next.png\n    |       |-- prev.png\n    |-- md_json\n    |   |-- blog.json\n    |   |-- docs.json\n    |-- site_config\n    |   |-- blog.js\n    |   |-- community.jsx\n    |   |-- docs.js\n    |   |-- home.jsx\n    |   |-- site.js\n    |-- src\n    |   |-- index.jsx\n    |   |-- index.scss\n    |   |-- markdown.scss\n    |   |-- variables.scss\n    |   |-- components\n    |   |   |-- bar\n    |   |   |   |-- index.jsx\n    |   |   |   |-- index.scss\n    |   |   |-- footer\n    |   |   |   |-- index.jsx\n    |   |   |   |-- index.scss\n    |   |   |-- header\n    |   |   |   |-- index.jsx\n    |   |   |   |-- index.scss\n    |   |   |-- language\n    |   |   |   |-- index.jsx\n    |   |   |-- pageSlider\n    |   |   |   |-- index.jsx\n    |   |   |   |-- index.scss\n    |   |   |-- sidemenu\n    |   |   |   |-- index.jsx\n    |   |   |   |-- index.scss\n    |   |   |   |-- item.jsx\n    |   |   |-- slider\n    |   |       |-- index.jsx\n    |   |       |-- index.scss\n    |   |-- pages\n    |       |-- blog\n    |       |   |-- blogItem.jsx\n    |       |   |-- blogItem.scss\n    |       |   |-- index.jsx\n    |       |   |-- index.scss\n    |       |-- blogDetail\n    |       |   |-- index.jsx\n    |       |   |-- index.scss\n    |       |-- community\n    |       |   |-- contactItem.jsx\n    |       |   |-- contributorItem.jsx\n    |       |   |-- ecoItem.jsx\n    |       |   |-- eventCard.jsx\n    |       |   |-- index.jsx\n    |       |   |-- index.scss\n    |       |-- documentation\n    |       |   |-- index.jsx\n    |       |   |-- index.scss\n    |       |-- home\n    |           |-- featureItem.jsx\n    |           |-- index.jsx\n    |           |-- index.scss\n    |-- utils\n        |-- index.js\n</code></pre>\n<p>现从上至下对主要的文件、文件夹作说明。</p>\n<h3>.docsite</h3>\n<p>空文件，用作判断当前项目是否已初始化过。</p>\n<h3>index.html</h3>\n<p>项目的承载页面。</p>\n<h3>blog</h3>\n<p>存放博客的markdown文档及相关图片资源的目录，分为中、英文两个目录。</p>\n<h3>docs</h3>\n<p>存放说明文档的markdown文档及相关图片资源的目录，分为中、英文两个目录。</p>\n<h3>img</h3>\n<p>存放非markdown使用的一些站点的图片，其中<code>system</code>中存放一些业务无关的图片。</p>\n<h3>md_json</h3>\n<p>存放解析markdown文档结果的json文件。</p>\n<h3>site_config</h3>\n<p>存放整个站点的中英文配置数据，其中<code>site.js</code>配置全局的一些数据，包括顶部的菜单栏和底部的页脚部分。<code>home.jsx</code>、<code>docs.js</code>、<code>blog.js</code>、<code>community.jsx</code>分别对应首页、文档页、博客列表页、社区页的配置。</p>\n<h3>src</h3>\n<p>存放源码的位置，其中<code>index.jsx</code>为主入口文件，<code>markdown.scss</code>为markdown文档的样式文件，<code>variable.scss</code>为一些公共scss变量，<code>components</code>为公共组件，<code>pages</code>为对应站点的不同页面，<code>utils</code>中存放一些公共方法。</p>\n<p>现在网站的骨架搭建完成，可以进行网站的自定义和内容填充了。</p>\n"
    },
    {
      "filename": "publish.md",
      "__html": "<h2>发布站点</h2>\n<blockquote>\n<p>至此，整个站点的开发已经完成，在项目根目录下执行<code>docsite build</code>进行项目构建。</p>\n</blockquote>\n<h3>站点托管</h3>\n<p>你可以将站点托管在github pages上或者自己的服务器上。</p>\n<h4>github pages托管</h4>\n<p>在github上新建仓库，将项目代码上传至仓库中。打开项目的github页面，选择<code>Setting</code>面板，如下所示：\n<img src=\"https://img.alicdn.com/tfs/TB1rbTHxXGWBuNjy0FbXXb4sXXa-1600-134.png\" alt=\"\"></p>\n<p>转到<code>GitHuo Pages</code>版面，选择<code>Source</code>后点击<code>Save</code>，会给出站点的访问地址，访问该地址即可看到你的站点。</p>\n<p><img src=\"https://img.alicdn.com/tfs/TB1bNegxDtYBeNjy1XdXXXXyVXa-1612-1296.png\" alt=\"\"></p>\n<h4>服务器托管</h4>\n<p>将项目中的<code>build</code>目录、<code>img</code>目录、<code>index.html</code>及其他图片资源放置在服务器中即可。</p>\n"
    },
    {
      "filename": "redirect.md",
      "__html": "<h2>重定向</h2>\n<p>有时候，你希望在用户访问某些url的时候，能够跳转到另一个特定的地址。\n这些跳转的配置过程如下：</p>\n<ol>\n<li>打开<code>src</code>目录下的<code>index.jsx</code>文件，找到类似如下的代码：</li>\n</ol>\n<pre><code class=\"language-jsx\">&lt;Redirect exact <span class=\"hljs-keyword\">from</span>=<span class=\"hljs-string\">\"/docs\"</span> to=<span class=\"hljs-string\">\"/docs/installation.md\"</span> /&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Redirect</span> <span class=\"hljs-attr\">exact</span> <span class=\"hljs-attr\">from</span>=<span class=\"hljs-string\">\"/docs/\"</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/docs/installation.md\"</span> /&gt;</span>\n</span></code></pre>\n<ol start=\"2\">\n<li>修改或添加对应的跳转规则。其中<code>from</code>指待跳转的地址，<code>to</code>指跳转后的地址</li>\n</ol>\n<p>整个工程采用hash路由，因此<code>from</code>和<code>to</code>的值最终会作为hash值在地址栏上体现，请以<code>/</code>作为开始。</p>\n"
    }
  ],
  "en-us": [
    {
      "filename": "addBlog.md",
      "__html": "<h2>添加博客</h2>\n<h3>放置位置</h3>\n<p>根据文档对应的语言版本，放入<code>blog</code>目录下的<code>zh-cn</code>或者<code>en-us</code>，可以是一层或者多层目录。</p>\n<h3>博客列表页配置</h3>\n<p>文档放入对应语言的目录中后，需要在<code>site_config/blog.js</code>中配置。其中的<code>link</code>字段用于配置访问地址，格式为<code>/blog/path-to-the-md</code>，需要注意的是这个路径不要包括语言路径（<code>zh-cn</code>或<code>en-us</code>）。</p>\n<p>例如，某个博客的存放位置为<code>root_directory/blog/en/demo/xxx.md</code>，那么<code>link</code>字段的配置值为<code>/blog/demo/xxx.md</code>。</p>\n"
    },
    {
      "filename": "addDoc.md",
      "__html": "<h2>添加文档</h2>\n<p>文档编写完成后，需要将其添加到页面当中。</p>\n<h3>放置位置</h3>\n<p>根据文档对应的语言版本，放入<code>docs</code>目录下的<code>zh-cn</code>或者<code>en-us</code>，可以是一层或者多层目录。</p>\n<h3>菜单配置</h3>\n<p>文档放入对应语言的目录中后，需要在<code>site_config/docs.js</code>中配置。其中的<code>link</code>字段用于配置访问地址，格式为<code>/docs/path-to-the-md</code>，需要注意的是这个路径不要包括语言路径（<code>zh-cn</code>或<code>en-us</code>）。</p>\n<p>例如，某个文档的存放位置为<code>root_directory/docs/en/demo/xxx.md</code>，那么<code>link</code>字段的配置值为<code>/docs/demo/xxx.md</code>。</p>\n"
    },
    {
      "filename": "commandLine.md",
      "__html": "<h2>命令行使用</h2>\n<p><code>docsite</code>集成的主要命令只有三个，主要如下：</p>\n<h3><code>docsite init</code></h3>\n<p>在项目根目录下执行该命令，会在目录下初始化一个站点开发模板并安装好相关依赖。</p>\n<h3><code>docsite start</code></h3>\n<p>执行该命令，会在本地启动一个开发服务器，端口号为<code>8080</code>。同时会在浏览器中自动打开该页面。在开发过程中，修改源代码包括markdown文档时，会自动进行编译，刷新浏览器即可看到更新后的结果。</p>\n<h3><code>docsite build</code></h3>\n<p>待本地开发完成后，运行该命令，将对源码和markdown文档进行编译和构建，生成构建后的文件。</p>\n<h3>其他</h3>\n<p>执行<code>docsite -h</code>获取更多命令的使用</p>\n"
    },
    {
      "filename": "create.md",
      "__html": "<h2>创建站点</h2>\n<blockquote>\n<p>在做好前面的准备工作后，现在可以着手定义属于你自己的站点了。</p>\n</blockquote>\n<p>在项目根目录下执行<code>docsite start</code>命令，会在浏览器中自动打开页面。</p>\n<p>初始化生成的模板工程默认集成了首页、文档页、博客列表页、博客详情页、社区页及中英文国际化功能。可以按照需求自行添加和删除页面。</p>\n<h3>添加文档</h3>\n<ol>\n<li>将对应的<code>.md</code>或者<code>.markdown</code>文件放进<code>docs</code>文件夹下的对应语言目录中，支持多级目录存放</li>\n<li>在<code>site_config</code>文件夹下的<code>docs.js</code>中配置文档的菜单项</li>\n</ol>\n<h3>添加博客</h3>\n<ol>\n<li>将对应的<code>.md</code>或者<code>.markdown</code>文件放进<code>blog</code>文件夹下的对应语言目录中，支持多级目录存放</li>\n<li>在<code>site_config</code>文件夹下的<code>blog.js</code>中配置博客的列表项</li>\n</ol>\n<blockquote>\n<p>markdown文件均支持在文档顶部自定义元数据，顶部的<code>---</code>（至少三个<code>-</code>）之间的数据会被认为是元数据，一个key占用一行。这些数据解析后会对应存放在<code>md_json</code>文件夹下的<code>blog.json</code>和<code>docs.json</code>文件中，其中<code>filename</code>和<code>__html</code>为保留字段，请勿使用。</p>\n</blockquote>\n<pre><code>---\nkey1: hello\nkey2: world\n---\n\nyour markdown content\n</code></pre>\n<h3>自定义页面</h3>\n<ol>\n<li>如果想增加页面，在<code>pages</code>目录下增加相应的页面，并在<code>src</code>目录下的<code>index.jsx</code>文件中配置对应的路由，同步在<code>site_config</code>文件夹下增加对应的页面配置</li>\n<li>如果想修改页面，在<code>pages</code>目录下针对修改对应的页面，并同步修改<code>site_config</code>文件夹下对应的页面配置</li>\n<li>如果想删除页面，在<code>pages</code>目录下增加相应的页面，并在<code>src</code>目录下的<code>index.jsx</code>文件中删除对应的路由，同步在<code>site_config</code>文件夹下删除对应的页面配置</li>\n<li>如果想修改站点的整体色调，请修改<code>src</code>目录下的<code>variables.scss</code></li>\n<li>如果想修改markdown文档的样式，请修改<code>src</code>目录下的<code>markdown.scss</code></li>\n</ol>\n<h3>页面标签及站点ico</h3>\n<p>修改根目录下的<code>index.html</code>中的<code>&lt;title&gt;页面标签标题&lt;/title&gt;</code>和<code>&lt;link rel=&quot;icon&quot; href=&quot;./img/dubbo.ico&quot;&gt;</code>的<code>href</code>属性。</p>\n"
    },
    {
      "filename": "customStyle.md",
      "__html": "<h2>自定义样式</h2>\n<p>自定义样式分为整个站点的自定义和文档展示风格的自定义。</p>\n<h3>站点自定义</h3>\n<p><code>src</code>目录下的<code>variables.scss</code>文件中，定义了一些用于控制站点整体显示风格的一些scss变量。通过修改这些变量，能够获得不同风格的站点。</p>\n<p>当然，如果这样还觉得不满足需求，可以进入到每个具体的页面的样式文件中去修改。</p>\n<h3>文档展示风格自定义</h3>\n<p><code>src</code>目录下的<code>markdown.scss</code>文件中，定义了文档展示风格的样式。分为两部分，文档的展示和代码高亮的展示。</p>\n<ul>\n<li>文档的展示</li>\n</ul>\n<p>默认采用github风格<a href=\"https://github.com/sindresorhus/github-markdown-css\">https://github.com/sindresorhus/github-markdown-css</a>，如果想要其他风格，请修改<code>markdown.scss</code>文件。</p>\n<ul>\n<li>代码高亮</li>\n</ul>\n<p>在<a href=\"https://highlightjs.org/static/demo/\">https://highlightjs.org/static/demo/</a>中去选择喜爱的高亮配色，然后根据选择后的主题名称，在<a href=\"https://github.com/isagalaev/highlight.js/tree/master/src/styles\">https://github.com/isagalaev/highlight.js/tree/master/src/styles</a>中复制对应的样式文件到<code>markdown.scss</code>中即可。</p>\n"
    },
    {
      "filename": "doc.md",
      "__html": "<h2>文档编写</h2>\n<h3>元数据</h3>\n<p>markdown文件均支持在文档顶部自定义元数据，顶部的<code>---</code>（至少三个<code>-</code>）之间的数据会被认为是元数据，一个key占用一行。这些数据解析后会对应存放在<code>md_json</code>文件夹下，blog的文档对应<code>blog.json</code>文件，docs下的文档对应<code>docs.json</code>文件，其中<code>filename</code>和<code>__html</code>为保留字段，请勿使用。</p>\n<pre><code>---\nkey1: hello\nkey2: world\n---\n</code></pre>\n<h3>路径</h3>\n<p>在编写markdown文档时，难免需要文档之间的相互引用。而相对地址的写法相比于绝对地址，对于站点内文档之间的引用显得更为便捷。</p>\n<p>当需要引用其他文档时，引用路径按照在项目目录的相对文件地址引用即可。</p>\n<p>同样的，当需要引用项目内的图片资源，引用路径同样是相对的文件地址。最终会被处理成正确的绝对地址。</p>\n"
    },
    {
      "filename": "i18n.md",
      "__html": "<h2>国际化</h2>\n<p>国际化分为两部分，分别为markdown文档的国际化和站点其余部分的国际化。</p>\n<h3>markdown文档的国际化</h3>\n<p>markdown文档主要分为说明文档和博客文档。这两种类型文档的国际化处理方式是类似的，说明文档按照中英文版本分别放入<code>docs</code>目录下的<code>zh-cn</code>和<code>en-us</code>目录中。博客文档按照中英文版本分别放入<code>blog</code>目录下的<code>zh-cn</code>和<code>en-us</code>目录中。</p>\n<h3>站点其余部分的国际化</h3>\n<p>在<code>site_config</code>目录中，根据中英文版本分别对应着<code>zh-cn</code>和<code>en-us</code>字段，所有页面相关的文案均需配置在这两个字段下。</p>\n"
    },
    {
      "filename": "installation.md",
      "__html": "<h2>安装</h2>\n<p>docsite用于根据markdown文档快速搭建静态站点。</p>\n<ol>\n<li>确保安装的<a href=\"https://nodejs.org/en/download/\">node</a>版本满足如下要求：<code>node &gt;= 8.6.0</code></li>\n<li>执行<code>npm install docsite -g</code>执行全局安装</li>\n</ol>\n<h2>验证安装</h2>\n<p>在终端中执行 <code>docsite -V</code>，能够显示当前安装的<code>docsite</code>版本，则表示安装成功。</p>\n"
    },
    {
      "filename": "preparation.md",
      "__html": "<h2>站点准备</h2>\n<p>在成功安装完<code>docsite</code>之后，进入项目根目录，执行<code>docsite init</code>，生成的目录如下结构：</p>\n<pre><code>|-- Project root\n    |-- .babelrc\n    |-- .docsite\n    |-- .eslintrc\n    |-- .gitignore\n    |-- README.md\n    |-- gulpfile.js\n    |-- index.html\n    |-- package-lock.json\n    |-- package.json\n    |-- webpack.config.js\n    |-- blog\n    |   |-- en-us\n    |   |   |-- blog1.md\n    |   |   |-- blog2.md\n    |   |   |-- blog3.md\n    |   |   |-- blog4.md\n    |   |   |-- blog5.md\n    |   |   |-- blog6.md\n    |   |   |-- blog7.md\n    |   |-- zh-cn\n    |       |-- blog1.md\n    |       |-- blog2.md\n    |       |-- blog3.md\n    |       |-- blog4.md\n    |       |-- blog5.md\n    |       |-- blog6.md\n    |       |-- blog7.md\n    |-- docs\n    |   |-- en-us\n    |   |   |-- demo1.md\n    |   |   |-- demo2.md\n    |   |   |-- dir\n    |   |   |   |-- demo3.md\n    |   |   |-- img\n    |   |       |-- brhtqqzh.jpeg\n    |   |-- zh-cn\n    |       |-- demo1.md\n    |       |-- demo2.md\n    |       |-- dir\n    |       |   |-- demo3.md\n    |       |-- img\n    |           |-- brhtqqzh.jpeg\n    |-- img\n    |   |-- alibaba.png\n    |   |-- alibaba_hover.png\n    |   |-- architecture.png\n    |   |-- brhtqqzh.jpeg\n    |   |-- documents.png\n    |   |-- dubbo.ico\n    |   |-- dubbo_colorful.png\n    |   |-- dubbo_gray.png\n    |   |-- dubbo_white.png\n    |   |-- feature_hogh.png\n    |   |-- feature_loadbalances.png\n    |   |-- feature_maintenance.png\n    |   |-- feature_runtime.png\n    |   |-- feature_service.png\n    |   |-- feature_transpart.png\n    |   |-- issue.png\n    |   |-- mailinglist.png\n    |   |-- mailinglist_hover.png\n    |   |-- pullrequest.png\n    |   |-- quick_start.png\n    |   |-- segmentfault.png\n    |   |-- segmentfault_hover.png\n    |   |-- users_alibaba.png\n    |   |-- weibo.png\n    |   |-- weibo_hover.png\n    |   |-- system\n    |       |-- arrow_down.png\n    |       |-- arrow_right.png\n    |       |-- blog.png\n    |       |-- community.png\n    |       |-- docs.png\n    |       |-- docs_hover.png\n    |       |-- docs_normal.png\n    |       |-- menu_gray.png\n    |       |-- menu_white.png\n    |       |-- next.png\n    |       |-- prev.png\n    |-- md_json\n    |   |-- blog.json\n    |   |-- docs.json\n    |-- site_config\n    |   |-- blog.js\n    |   |-- community.jsx\n    |   |-- docs.js\n    |   |-- home.jsx\n    |   |-- site.js\n    |-- src\n    |   |-- index.jsx\n    |   |-- index.scss\n    |   |-- markdown.scss\n    |   |-- variables.scss\n    |   |-- components\n    |   |   |-- bar\n    |   |   |   |-- index.jsx\n    |   |   |   |-- index.scss\n    |   |   |-- footer\n    |   |   |   |-- index.jsx\n    |   |   |   |-- index.scss\n    |   |   |-- header\n    |   |   |   |-- index.jsx\n    |   |   |   |-- index.scss\n    |   |   |-- language\n    |   |   |   |-- index.jsx\n    |   |   |-- pageSlider\n    |   |   |   |-- index.jsx\n    |   |   |   |-- index.scss\n    |   |   |-- sidemenu\n    |   |   |   |-- index.jsx\n    |   |   |   |-- index.scss\n    |   |   |   |-- item.jsx\n    |   |   |-- slider\n    |   |       |-- index.jsx\n    |   |       |-- index.scss\n    |   |-- pages\n    |       |-- blog\n    |       |   |-- blogItem.jsx\n    |       |   |-- blogItem.scss\n    |       |   |-- index.jsx\n    |       |   |-- index.scss\n    |       |-- blogDetail\n    |       |   |-- index.jsx\n    |       |   |-- index.scss\n    |       |-- community\n    |       |   |-- contactItem.jsx\n    |       |   |-- contributorItem.jsx\n    |       |   |-- ecoItem.jsx\n    |       |   |-- eventCard.jsx\n    |       |   |-- index.jsx\n    |       |   |-- index.scss\n    |       |-- documentation\n    |       |   |-- index.jsx\n    |       |   |-- index.scss\n    |       |-- home\n    |           |-- featureItem.jsx\n    |           |-- index.jsx\n    |           |-- index.scss\n    |-- utils\n        |-- index.js\n</code></pre>\n<p>现从上至下对主要的文件、文件夹作说明。</p>\n<h3>.docsite</h3>\n<p>空文件，用作判断当前项目是否已初始化过。</p>\n<h3>index.html</h3>\n<p>项目的承载页面。</p>\n<h3>blog</h3>\n<p>存放博客的markdown文档及相关图片资源的目录，分为中、英文两个目录。</p>\n<h3>docs</h3>\n<p>存放说明文档的markdown文档及相关图片资源的目录，分为中、英文两个目录。</p>\n<h3>img</h3>\n<p>存放非markdown使用的一些站点的图片，其中<code>system</code>中存放一些业务无关的图片。</p>\n<h3>md_json</h3>\n<p>存放解析markdown文档结果的json文件。</p>\n<h3>site_config</h3>\n<p>存放整个站点的中英文配置数据，其中<code>site.js</code>配置全局的一些数据，包括顶部的菜单栏和底部的页脚部分。<code>home.jsx</code>、<code>docs.js</code>、<code>blog.js</code>、<code>community.jsx</code>分别对应首页、文档页、博客列表页、社区页的配置。</p>\n<h3>src</h3>\n<p>存放源码的位置，其中<code>index.jsx</code>为主入口文件，<code>markdown.scss</code>为markdown文档的样式文件，<code>variable.scss</code>为一些公共scss变量，<code>components</code>为公共组件，<code>pages</code>为对应站点的不同页面，<code>utils</code>中存放一些公共方法。</p>\n<p>现在网站的骨架搭建完成，可以进行网站的自定义和内容填充了。</p>\n"
    },
    {
      "filename": "publish.md",
      "__html": "<h2>发布站点</h2>\n<blockquote>\n<p>至此，整个站点的开发已经完成，在项目根目录下执行<code>docsite build</code>进行项目构建。</p>\n</blockquote>\n<h3>站点托管</h3>\n<p>你可以将站点托管在github pages上或者自己的服务器上。</p>\n<h4>github pages托管</h4>\n<p>在github上新建仓库，将项目代码上传至仓库中。打开项目的github页面，选择<code>Setting</code>面板，如下所示：\n<img src=\"https://img.alicdn.com/tfs/TB1rbTHxXGWBuNjy0FbXXb4sXXa-1600-134.png\" alt=\"\"></p>\n<p>转到<code>GitHuo Pages</code>版面，选择<code>Source</code>后点击<code>Save</code>，会给出站点的访问地址，访问该地址即可看到你的站点。</p>\n<p><img src=\"https://img.alicdn.com/tfs/TB1bNegxDtYBeNjy1XdXXXXyVXa-1612-1296.png\" alt=\"\"></p>\n<h4>服务器托管</h4>\n<p>将项目中的<code>build</code>目录、<code>img</code>目录、<code>index.html</code>及其他图片资源放置在服务器中即可。</p>\n"
    },
    {
      "filename": "redirect.md",
      "__html": "<h2>重定向</h2>\n<p>有时候，你希望在用户访问某些url的时候，能够跳转到另一个特定的地址。\n这些跳转的配置过程如下：</p>\n<ol>\n<li>打开<code>src</code>目录下的<code>index.jsx</code>文件，找到类似如下的代码：</li>\n</ol>\n<pre><code class=\"language-jsx\">&lt;Redirect exact <span class=\"hljs-keyword\">from</span>=<span class=\"hljs-string\">\"/docs\"</span> to=<span class=\"hljs-string\">\"/docs/installation.md\"</span> /&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Redirect</span> <span class=\"hljs-attr\">exact</span> <span class=\"hljs-attr\">from</span>=<span class=\"hljs-string\">\"/docs/\"</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/docs/installation.md\"</span> /&gt;</span>\n</span></code></pre>\n<ol start=\"2\">\n<li>修改或添加对应的跳转规则。其中<code>from</code>指待跳转的地址，<code>to</code>指跳转后的地址</li>\n</ol>\n<p>整个工程采用hash路由，因此<code>from</code>和<code>to</code>的值最终会作为hash值在地址栏上体现，请以<code>/</code>作为开始。</p>\n"
    }
  ]
}